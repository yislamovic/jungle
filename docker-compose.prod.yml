services:
  db:
    image: postgres:14-alpine
    container_name: jungle-postgres
    environment:
      POSTGRES_USER: jungle
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-secure_password_change_me}
      POSTGRES_DB: jungle_production
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - jungle-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U jungle"]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    build: .
    container_name: jungle-web
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "${PORT:-3000}:3000"
    env_file:
      - .env.production
    environment:
      - RAILS_ENV=production
      - DATABASE_URL=postgresql://jungle:${DATABASE_PASSWORD:-secure_password_change_me}@db:5432/jungle_production
      - RAILS_SERVE_STATIC_FILES=true
      - RAILS_LOG_TO_STDOUT=true
    volumes:
      - ./public/uploads:/app/public/uploads
      - ./log:/app/log
    networks:
      - jungle-network
    restart: unless-stopped
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        bundle exec rails db:create db:migrate &&
        echo 'Seeding database...' &&
        bundle exec rails db:seed &&
        echo 'Starting Rails server...' &&
        bundle exec rails server -b 0.0.0.0 -p 3000
      "
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
    driver: local

networks:
  jungle-network:
    driver: bridge
